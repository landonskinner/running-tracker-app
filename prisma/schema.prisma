// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// model Account {
//   id                 String  @id @default(cuid())
//   userId             Int
//   type               String
//   provider           String
//   providerAccountId  String
//   refresh_token      String?  @db.Text
//   access_token       String?  @db.Text
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?  @db.Text
//   session_state      String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique
//   userId       Int
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model VerificationToken {
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

model User {
  id            Int            @id @default(autoincrement())
  firstName     String?
  lastName      String?
  email         String?        @unique
  createdAt     DateTime       @default(now()) @map(name: "created_at")
  // emailVerified DateTime?
  // image         String?
  // accounts      Account[]
  // sessions      Session[]
  scheduledRuns ScheduledRun[]

  @@map(name: "users")
}

model ScheduledRun {
  id           Int           @id @default(autoincrement())
  distance     Int
  paceMinutes  Int?
  paceSeconds  Int?
  date         DateTime
  createdAt    DateTime      @default(now()) @map(name: "created_at")
  user         User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       Int?
  completedRun CompletedRun?
}

model CompletedRun {
  id             Int          @id @default(autoincrement())
  paceMinutes    Int
  paceSeconds    Int
  calories       Int?
  rating         Int?
  realDistance   Float
  scheduledRun   ScheduledRun @relation(fields: [scheduledRunId], references: [id], onDelete: Cascade)
  scheduledRunId Int          @unique
}
